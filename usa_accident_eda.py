# -*- coding: utf-8 -*-
"""USA Accident EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z3eFow9Vb-b3TOFMhG7DInIJ-KNhPcGf

# USA Accident Exploratory data analysis
Source: Kaggle

Data is about accidents

Can be useful to prevent future accidents

###1.Are there more accidents in warmer or colder areas
###2.Which 5 states have the highest no of accidents? How about per capita?
###3.Does New York show up in the data? If yes, why is the count lower if this is the most populated city?
###4.Among the top 100 cities in the no of accidents, which states do they belong to most frequently?
###5.What time of the day are accidents most frequent in?
###6.Which day of the week have most accidents?
###7. Which months have the most accidents?
###8. What is the trend year over year?
"""

# Import pandas package
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sns.set()

from google.colab import drive
drive.mount('/content/drive')

"""load data

*   Look at some information about data and columns
*   Fix any missing and incorrect values




"""

# loading EXCEL File
file_path = '/content/drive/MyDrive/Colab Notebooks/01_Python and data science/EDA Capstone/USA Accident Data/US_Accidents_Dec21_updated.csv'
df=pd.read_csv(file_path)
pd.set_option('display.max_columns',None)

df.head()

df.tail()

df.shape

df.columns

df.info()

df.describe()

numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
numeric_df = df.select_dtypes(include=numerics)
numeric_df.columns
len(numeric_df.columns)

df.isnull().sum()

df.isna()

df.isna().sum().sort_values(ascending=False)

"""Percentage of missing values per column"""

missing_percentage=df.isna().sum().sort_values(ascending=False)/len(df)
missing_percentage

type(missing_percentage)

missing_percentage[missing_percentage != 0]

missing_percentage[missing_percentage != 0]

missing_percentage[missing_percentage != 0].plot(kind='barh')

"""Remove columns that you don't want to use

# EDA and Visualization
##Ask Questions


1.   Are there more accidents in warmer or colder areas?
2.   Which states have the highest no of accidents?How about the per capita?
3.Does New york show up in data? if yes why is the count low if most populated?
"""

df.columns

"""columns we will analyze

1.   city
2.   Start Time, End Time
3. Start_Lat, Start_Lng
4. Temperature
5. Weather_Condition

###City
"""

df.City

cities=df.City.unique()
cities[:200]

len(cities)

cities_by_accident=df.City.value_counts()
cities_by_accident

cities_by_accident[:20]

cities_by_accident['New York']

'New York' in cities

'New York' in cities_by_accident

cities_by_accident[:20].plot(kind='barh')

sns.set_style("darkgrid")

sns.distplot(cities_by_accident)

len(list(df.State.unique()))

high_accident_cities=cities_by_accident[cities_by_accident>=1000]
low_accident_cities=cities_by_accident[cities_by_accident<1000]

no_accident_cities=cities_by_accident[cities_by_accident==0]
len(no_accident_cities)

one_accident_cities=cities_by_accident[cities_by_accident==1]
len(one_accident_cities)

two_accident_cities=cities_by_accident[cities_by_accident==2]
len(two_accident_cities)

len(high_accident_cities)/len(cities)

high_accident_cities.count()

sns.histplot(high_accident_cities, log_scale=True)

sns.histplot(low_accident_cities, log_scale=True)

cities_by_accident[cities_by_accident==2]

"""###Start_Time"""

df.Start_Time

df.Start_Time[0]

df.Start_Time=pd.to_datetime(df.Start_Time)
df.Start_Time[0]

df.Start_Time.dt.hour

sns.histplot(df.Start_Time.dt.hour,bins=24)

"""##Figure out how to show percentages?"""

sns.distplot(df.Start_Time.dt.hour,bins=24, kde=False, norm_hist=True)

"""###High percentage of accidents happened from 13:00(1:00 PM) to 18:00(6:00PM). May be people in hurry
###Next highest percentage of accidents from 6:00AM to 9:00AM.
"""

df.Start_Time.dt.minute

sns.histplot(df.Start_Time.dt.minute,bins=12)

df.Start_Time.dt.month

sns.distplot(df.Start_Time.dt.month,bins=12,kde=False,norm_hist=True)

"""###Accidents percentage increases sharply towards the end of year(sept,oct,nov,dec).May be because of winter."""

df_2016=df[df.Start_Time.dt.year==2016]
sns.distplot(df_2016.Start_Time.dt.month,bins=12,kde=False,norm_hist=True)

df_2017=df[df.Start_Time.dt.year==2017]
sns.distplot(df_2017.Start_Time.dt.month,bins=12,kde=False,norm_hist=True)

df_2018=df[df.Start_Time.dt.year==2018]
sns.distplot(df_2018.Start_Time.dt.month,bins=12,kde=False,norm_hist=True)

df_2019=df[df.Start_Time.dt.year==2019]
sns.distplot(df_2019.Start_Time.dt.month,bins=12,kde=False,norm_hist=True)

df_2020=df[df.Start_Time.dt.year==2020]
sns.distplot(df_2020.Start_Time.dt.month,bins=12,kde=False,norm_hist=True)

df_2021=df[df.Start_Time.dt.year==2021]
sns.distplot(df_2021.Start_Time.dt.month,bins=12,kde=False,norm_hist=True)

"""### From this data, it is clear that some data is missing from 2016,2017and 2020."""

df.columns

df.Start_Time.dt.year



sns.histplot(df.Start_Time.dt.year,bins=6)

"""###Count of accidents increased exponentionally after 2019."""

df.Start_Time.dt.second

df.Start_Time.dt.day

sns.distplot(df.Start_Time.dt.dayofweek,bins=7,kde=False, norm_hist=True)



"""###On weekends, no of accidents are less.

###Is the distribution of accidents by hour the same on weekends and weekdays?
"""

sundays_start_time=df.Start_Time[df.Start_Time.dt.dayofweek==6]
sundays_start_time

sns.distplot(sundays_start_time.dt.hour,bins=24,kde=False, norm_hist=True)

saturday_start_time=df.Start_Time[df.Start_Time.dt.dayofweek==5]
saturday_start_time

sns.distplot(saturday_start_time.dt.hour,bins=24,kde=False, norm_hist=True)

"""###On saturday and sunday, peak occurs between 11:00AM TO 7:00PM, unlike weekdays."""

monday_start_time=df.Start_Time[df.Start_Time.dt.dayofweek==0]
monday_start_time

sns.distplot(monday_start_time.dt.hour,bins=24,kde=False, norm_hist=True)

"""##Start Latitude and Longitude"""

df.Start_Lat

df.Start_Lng

sns.scatterplot(x=df.Start_Lng, y=df.Start_Lat)

import folium

lon,lat=df.Start_Lng[0],df.Start_Lat[0]
lon,lat

map=folium.Map()
marker=folium.Marker((lat,lon))
marker.add_to(map)
map

"""# Summary and Conclusions


1.   Less than 5% of cities have more than 1000 yearly accidents.
2.   Over 1100 cities just reported only one accident. Over 800 cities just reported only two accidents. (Need to investigate)
3. The no of accidents per city increases/decreases exponentially.


"""



!pip install dataprep

